Based on my investigation of the codebase, here are the explanations for the three issues:

1. PDF Auto-Opening After Login
What's Happening:
The system has automatic task detection that runs when you log in. If there's any task in the database with status "ACTIVE" or scheduled to start, it triggers the handleTaskAutoStart function, which automatically opens the PDF:

if (data.pdfFileUrl) {
  const pdfWindow = window.open(data.pdfFileUrl, '_blank');
}
Why This Occurs:

There's likely a task in the database that's still marked as "ACTIVE" even though you think it doesn't exist
The HTTP polling system (checkForActiveTasks) queries /api/tasks/active and finds this remnant task
The system thinks it's helping by auto-starting the task and opening your study material
The Problem: The task cleanup isn't happening properly - tasks that should be finished are staying in "ACTIVE" status.

2. Missing Task End Time Logic
Current Situation:

✅ Tasks have proper endAt times calculated: startAt + durationMinutes
✅ There's a TaskScheduler that checks every 30 seconds to START due tasks
❌ There's NO automatic logic to STOP tasks when endAt is reached
What Should Happen:
Users should be able to submit proof and not be redirected once the task end time passes.

What Actually Happens:

Tasks remain "ACTIVE" indefinitely until manually stopped
Users get redirected to "completed" tasks because the system still thinks they're active
Only way to stop enforcement is through proof submission endpoints (/api/proof/:sessionId/)
The Problem: The TaskScheduler only has checkAndStartDueTasks() but no checkAndStopExpiredTasks() method.

3. Calendar Red Dot vs Task Page Discrepancy
Calendar Logic:

const getDayCompletionStatus = (day: Date) => {
  const dayTasks = getTasksForDay(day); // Gets ALL tasks for the day
  if (dayTasks.length === 0) return 'none';
  
  const completedTasks = dayTasks.filter(task => task.status === 'COMPLETED').length;
  if (completedTasks === dayTasks.length) return 'complete'; // Green dot
  if (completedTasks > 0) return 'partial'; // Yellow dot
  return 'pending'; // Red dot - tasks exist but none completed
}
Task Page Logic:

const filterTasks = (filter: string) => {
  switch (filter) {
    case "today": return tasks.filter(task => taskDate >= today && taskDate < tomorrow);
    case "upcoming": return tasks.filter(task => new Date(task.startAt) > tomorrow);
    case "completed": return tasks.filter(task => task.status === 'COMPLETED');
  }
}
The Discrepancy:

Calendar sees ALL tasks for date 21 (including ACTIVE, FAILED, PENDING statuses)
Task Page only shows tasks that match the current tab filter
If you have tasks with status "ACTIVE" or "FAILED" on date 21, the calendar shows a red dot, but they won't appear in "Today" (if not today) or "Completed" tabs
The Problem: Different filtering criteria between calendar and task page views.

Summary
All three issues stem from incomplete task lifecycle management:

Tasks aren't properly cleaned up when finished
No automatic task stopping when end time is reached
Inconsistent task status filtering across different views
The system needs a checkAndStopExpiredTasks() method in the TaskScheduler to automatically mark tasks as completed/failed when their endAt time passes.